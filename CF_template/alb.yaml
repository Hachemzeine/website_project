AWSTemplateFormatVersion: 2010-09-09

Description: This template creates an Application Load Balancer and ec2 instances.

Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - 
        Label: 
          default: "Export VPC Stack Name"
        Parameters:
          - ExportVpcStackName
      - 
        Label: 
          default: "Certificate Arn"
        Parameters:
          - AcmCertificate
      - 
        Label: 
          default: "EC2 Parameters"
        Parameters:
          - AmazonImageID
          - InstanceType

Parameters:
  AcmCertificate:
    Description: The ARN of the AWS Certification Manager's certificate
    Type: String

  ExportVpcStackName:
    Description: The name of the vpc stack that exports values
    Type: String

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.


Resources:
#Create an Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: Albcadors
      SecurityGroups:
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-ALBSecurityGroup
      Subnets: 
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-PublicSubnet1
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-PublicSubnet2

#Create a Listener on Port 80 redirect to 443
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: '#{host}'
            Path: '/#{path}'
            Port: '443'
            Protocol: HTTPS
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

#Create a Listener on Port 443
  ALBListenerSslCertificate:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref AcmCertificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS

# Create a Target Group
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200,302
      Name: MyWebServers
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref EC2Instance1
          Port: 80
        - Id: !Ref EC2Instance2
          Port: 80
      TargetType: instance
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue: !Sub ${ExportVpcStackName}-VPC

#Create 2 EC2 with ami in region europ-eu3
  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId:
        Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet1
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-WebServerSecurityGroup
      ImageId: ami-0f5094faf16f004eb 
      Tags:
        - Key: Name
          Value: EC2 | Private Subnet 1
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            sudo yum update -y 
            sudo yum install wget ruby -y 
            wget https://aws-codedeploy-eu-west-3.s3.amazonaws.com/latest/install
            chmod +x ./install
            sudo ./install auto
            sudo service codedeploy-agent start
            

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId:
        Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet2
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-WebServerSecurityGroup
      ImageId: ami-0f5094faf16f004eb
      Tags:
        - Key: Name
          Value: EC2 | Private Subnet 2
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            sudo yum update -y 
            sudo yum install wget ruby -y 
            wget https://aws-codedeploy-eu-west-3.s3.amazonaws.com/latest/install
            chmod +x ./install
            sudo ./install auto
            sudo service codedeploy-agent start

Outputs:
# Export Target Group
  ALBTargetGroup:
    Description: Webserver target group 
    Export:
      Name: !Sub ${AWS::StackName}-ALBTargetGroup
    Value: !Ref ALBTargetGroup

# Export Application Load Balancer Dns Name
  ApplicationLoadBalancerDnsName:
    Description: Application Load Balancer DNS Name 
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerDnsName
    Value: !GetAtt ApplicationLoadBalancer.DNSName 

# Export Application Load Balancer Zone ID
  ApplicationLoadBalancerZoneID:
    Description: Application Load Balancer Canonical Hosted Zone ID
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerZoneID
    Value: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID